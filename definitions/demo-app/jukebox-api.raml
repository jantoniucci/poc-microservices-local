#%RAML 0.8
---
title: Jukebox API
baseUri: http://jukebox.api.com
version: v1

schemas:
 - song: !include schemas/song.schema
 - songs: !include schemas/songs.schema
 - album: !include schemas/album.schema
 - albums: !include schemas/albums.schema
 - artist: !include schemas/artist.schema
 - artists: !include schemas/artists.schema
 - responseMessage: !include schemas/responseMessage.schema.json
 - messageResponse: !include schemas/responseMessage.schema.json
 - errorMessage: !include schemas/errorMessage.schema.json

resourceTypes: 
  - !include resourceTypes/readOnlyCollection.yaml
  - !include resourceTypes/collection.yaml
  - !include resourceTypes/collection-item.yaml

traits:
  - !include traits/searchable.yaml
  - !include traits/orderable.yaml
  - !include traits/pageable.yaml

/songs:
  type:
    collection: 
      exampleCollection: !include samples/songs.sample
      exampleItem: !include samples/song-new.sample
  get:
    is: [
          searchable: {description: "with valid searchable fields: songTitle", example: "[\"songTitle\", \"Get L\", \"like\"]"},
          orderable: {fieldsList: "songTitle"},
          pageable
        ]
  /{songId}:
    type:
      collection-item:
        exampleItem: !include samples/song-retrieve.sample
    /file-content:
      description: The file to be reproduced by the client
      get:
        description: Get the file content
        responses:
          200:
            body:
              binary/octet-stream:
      post:
        description: |
           Enters the file content for an existing song entity.

           The song needs to be created for the `/songs/{songId}/file-content` to exist.
           You can use this second resource to get and post the file to reproduce.

           Use the "binary/octet-stream" content type to specify the content from any consumer (excepting web-browsers).
           Use the "multipart-form/data" content type to upload a file which content will become the file-content
        body:
          binary/octet-stream:
          multipart/form-data:
            formParameters:
              file:
                description: The file to be uploaded
                required: true
                type: file
/artists:
  type:
    collection: 
      exampleCollection: !include samples/artists.sample
      exampleItem: !include samples/artist-new.sample
  get:
    is: [
          searchable: {description: "with valid searchable fields: countryCode", example: "[\"countryCode\", \"FRA\", \"equals\"]"},
          orderable: {fieldsList: "artistName, nationality"},
          pageable
        ]
  /{artistId}:
    type:
      collection-item:
        exampleItem: !include samples/artist-retrieve.sample
    /albums:
      type:
        readOnlyCollection:
          exampleCollection: !include samples/artist-albums.sample
      description: Collection of albulms belonging to the artist
      get:
        description: Get a specific artist's albums list
        is: [orderable: {fieldsList: "albumName"}, pageable]
/albums:
  type:
    collection: 
      exampleCollection: !include samples/albums.sample
      exampleItem: !include samples/album-new.sample
  get:
    is: [
          searchable: {description: "with valid searchable fields: genreCode", example: "[\"genreCode\", \"ELE\", \"equals\"]"},
          orderable: {fieldsList: "albumName, genre"},
          pageable
        ]
  /{albumId}:
    type:
      collection-item:
        exampleItem: !include samples/album-retrieve.sample
    /songs:
      type:
        readOnlyCollection:
          exampleCollection: !include samples/album-songs.sample
      get:
        is: [orderable: {fieldsList: "songTitle"}]
        description: Get the list of songs for the album with `albumId = {albumId}`
