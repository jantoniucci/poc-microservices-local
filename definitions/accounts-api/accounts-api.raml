#%RAML 0.8
---
title: Accounts & transfers
baseUri: http://accounts.demo/api
version: v1

schemas:
 - signer: !include schemas/signer.schema.json
 - amount: !include schemas/amount.schema.json
 - account: !include schemas/account.schema.json
 - accounts: !include schemas/accounts.schema.json
 - transfer: !include schemas/transfer.schema.json
 - transfers: !include schemas/transfers.schema.json
 - errorMessage: !include schemas/errorMessage.schema.json
 - responseMessage: !include schemas/responseMessage.schema.json
 - fieldValidationError: !include schemas/fieldValidationError.schema.json

resourceTypes: 
  - !include resourceTypes/readOnlyCollection.yaml
  - !include resourceTypes/readOnlyCollection-item.yaml
  - !include resourceTypes/collection.yaml
  - !include resourceTypes/collection-item.yaml

traits:
  - !include traits/searchable.yaml
  - !include traits/orderable.yaml
  - !include traits/pageable.yaml
  - !include traits/secured.yaml
  - !include traits/validable.yaml

/accounts:
  is: [
    searchable: {
      description: "with valid searchable fields: IBAN, balance, description",
      example: "[{\"IBAN\", \"2038\", \"like\"},{\"balance\", 1000.0, \"gte\"}]"
    },
    orderable: {
      fieldsList: "alias, description, balance"
    },
    pageable,
    secured
  ]
  type:
    readOnlyCollection:
      exampleCollection: !include samples/accounts.json
  get:
  /{accountId}:
    is: [secured]
    type:
      readOnlyCollection-item:
        exampleItem: !include samples/account.json
    get:
    /transfers:
      is: [
        searchable: {
          description: "with valid searchable fields: status, accountIdTo, amount, description",
          example: "[{\"amount\", 100.0, \"gte\"}, {\"description\" : \"shoppings\"}]"
        },
        orderable: {
          fieldsList: "accountIdTo, description, amount, status"
        },
        pageable,
        secured
      ]
      type:
        collection:
          exampleCollection: !include samples/transfers.json
      get:
      /{transferId}:
        is: [secured]
        type:
          collection-item:
            exampleItem: !include samples/transfer.json
        get:
        put:
         is: [
           validable : {
             "schema": !include schemas/validations.schema.json,
             "example": !include samples/validations.sample.json
           }
         ]
        delete:
          is: [
            validable: {
              schema: !include schemas/errorMessage.schema.json,
              example: "{\"message\" : \"Cannot delete transfer\"}"
            }
          ]

/transfers:
  is: [
    searchable: {
      description: "with valid searchable fields: status, accountIdFrom, accountIdTo, amount, description",
      example: "[{\"amount\", 100.0, \"gte\"}, {\"description\" : \"shoppings\"}]"
    },
    orderable: {
      fieldsList: "accountIdFrom, accountIdTo, description, amount, status"
    },
    pageable,
    secured
  ]
  type:
    collection:
      exampleCollection: !include samples/transfers.json
  get:
  /{transferId}:
    is: [secured]
    type:
      collection-item:
        exampleItem: !include samples/transfer.json
    get:
    put:
      is: [
        validable : {
          "schema": !include schemas/validations.schema.json,
          "example": !include samples/validations.sample.json
      }]
    delete:
      is: [
        validable: {
          schema: !include schemas/errorMessage.schema.json,
          example: "{\"message\" : \"Cannot delete transfer\"}"
        }
      ]


